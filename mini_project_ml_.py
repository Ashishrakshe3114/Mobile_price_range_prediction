# -*- coding: utf-8 -*-
"""Mini project ML .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i9Ahlm9XcHR4SvurpCPeJs9Id8WDZuHy
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df1 = pd.read_csv("/content/test.csv")
df1

df2 = pd.read_csv("/content/train.csv")
df2

df1.info()

df2.columns

x=df2[['battery_power', 'blue', 'clock_speed', 'dual_sim', 'fc', 'four_g',
       'int_memory', 'm_dep', 'mobile_wt', 'n_cores', 'pc', 'px_height',
       'px_width', 'ram', 'sc_h', 'sc_w', 'talk_time', 'three_g',
       'touch_screen', 'wifi']]

y = df2['price_range']

# import all model

from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

# call the model

model_knn = KNeighborsClassifier()
model_LR = LogisticRegression()
model_svm = SVC()
model_nb = GaussianNB()

# train test splits

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=12)

# train the models

model_knn.fit(x_train,y_train)
model_LR.fit(x_train,y_train)
model_svm.fit(x_train,y_train)
model_nb.fit(x_train,y_train)

# testing the model

y_pred_knn = model_knn.predict(x_test)
y_pred_LR = model_LR.predict(x_test)
y_pred_svm = model_svm.predict(x_test)
y_pred_nb = model_nb.predict(x_test)

#evalution

print(classification_report(y_test,y_pred_knn))

print(classification_report(y_test,y_pred_LR))

print(classification_report(y_test,y_pred_svm))

print(classification_report(y_test,y_pred_nb))

x_train.columns

df1.columns

df1.info()

df1.drop('id',axis=1,inplace=True)

x_train.columns

df1.columns

sum(x_train.columns==df1.column)

# df1 is in proper order

predicted_price = model_svm.predict(df1)

# adding the column in df1

df1['Est_price_range'] = predicted_price

df1

# saving the file

df1.to_csv('Final_price.csv')

